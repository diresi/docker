ldap
mariadb

gerrit
phabricator

gitlab statt gerrit

- dockerize jedes service (db, ldap, repos, review, ticketing, ci).
- link services
- "server" (ram, disk space, cpu cores?)
- web frontend (haproxy?)
- backup (wohin damit?)
- dev env
  - webserver
  - wsgi?
  - gearman?
  - testing interfaces?
  - ci?


http://java.dzone.com/articles/exploring-message-brokers

distributed graph db
https://github.com/thinkaurelius/titan/

http://www.consul.io/intro/vs/zookeeper.html

ist genau was ich mitm pika machen wollt, nur viel weiter :)
allerdings scheinen die worker zu forken, das mag die ente ja nicht soooo gern
http://www.celeryproject.org/
ad threads:
siehe --pool: prefork (default), eventlet, gevent, solo or threads.
ich kann jetzt forking auf nb.fork() umstellen und/oder threads auf
bootstrap_thread() stellen.
Beides sollte sich per monkeypatch regeln lassen.

Für den nb.fork() Modus ists vll relevant die PID zu returnen, allerdings ist
die opensource ente eh noch sehr jung, da lässt sich das vll machen. Sonst halt
mit irgendeiner initialen Kommunikation direkt nach dem nb.fork().
Die Idee dabei ist, dass der celery worker im master ente Prozess läuft, an der
Stelle sollte er eigentlich gut forken können.

für die visualisierung des fortschritts (schon allein, weil der typ so lustig schreibt):
https://github.com/PolicyStat/jobtastic


anforderungen ans ticketing/review/...
- zentrale repos
- reviews mit versionshistorie (interdiff)
- reviews mit verlinkbarkeit zum ticketing
- ticketing mit verlinkbarkeit zum review
- optional: ci integration (gated commits)
- optional: mandatory approval fürs mergen
- optional: automerge
- nicht notwendig: acl

communication platform
https://slack.com
